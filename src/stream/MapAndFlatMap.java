package stream;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Java Program to demonstrate difference between map()
 * vs flatMap() function in Java 8. Both are defined
 * in Stream class. 
 *
 * @author WINDOWS 8
 */
public class MapAndFlatMap {

    public static void main(String args[]) {

        // foods which helps in weight loss
        List<String> loseWeight = new ArrayList<>();
        loseWeight.add("avocados");
        loseWeight.add("beans");
        loseWeight.add("salad");
        loseWeight.add("oats");
        loseWeight.add("broccoli");
                
        System.out.println("list of String : " + loseWeight);
        
        // let's use map() method to convert list of weight
        // lose food, which are String to list of ints
        // which are length of each food String
        
        List listOfInts = loseWeight.stream()
                .map(s -> s.length())
                .collect(Collectors.toList());
        
        System.out.println("list of ints generate by map(): " + listOfInts);

        
        // flatMap() example, let's first creat a list of list
        List<List> listOfListOfNumber = new ArrayList<>();
        listOfListOfNumber.add(Arrays.asList(2, 4));
        listOfListOfNumber.add(Arrays.asList(3, 9));
        listOfListOfNumber.add(Arrays.asList(4, 16));
        
        System.out.println("list of list : " + listOfListOfNumber);
        
        // let's use flatMap() to flatten this list into
        // list of integers i.e. 2,4,3,9,4,16
        
        List listOfIntegers = 
        		(List) listOfListOfNumber.stream()
		.flatMap( list -> list.stream())
		.collect(Collectors.toList());
        
        System.out.println("list of numbers generated by flatMap : " + listOfIntegers);
                

    }

}
